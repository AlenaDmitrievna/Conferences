// <auto-generated />
using System;
using Conference.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Conference.Migrations
{
    [DbContext(typeof(ConfContext))]
    [Migration("20190317181839_AdminOfConf")]
    partial class AdminOfConf
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("Conference.Model.AdminOfConference", b =>
                {
                    b.Property<int>("AdminOfConferenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConferenceId");

                    b.Property<int>("UserId");

                    b.HasKey("AdminOfConferenceId");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("UserId");

                    b.ToTable("AdminOfConference");
                });

            modelBuilder.Entity("Conference.Model.Conference", b =>
                {
                    b.Property<int>("ConferenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConferenceName");

                    b.Property<DateTime>("DateTimeFinishConference");

                    b.Property<DateTime>("DateTimeStartConference");

                    b.Property<string>("Location");

                    b.Property<int?>("ThemeConferenceThemeSectionId");

                    b.Property<int>("ThemeConferenced");

                    b.HasKey("ConferenceId");

                    b.HasIndex("ThemeConferenceThemeSectionId");

                    b.ToTable("Conference");
                });

            modelBuilder.Entity("Conference.Model.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LectureID");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<bool>("Private");

                    b.Property<double>("Size");

                    b.HasKey("Id");

                    b.HasIndex("LectureID");

                    b.ToTable("File");
                });

            modelBuilder.Entity("Conference.Model.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTimeCloseChat");

                    b.Property<DateTime>("DateTimeLecture");

                    b.Property<DateTime>("DateTimeOpenChat");

                    b.Property<int>("SectionID");

                    b.Property<string>("TopicLecture");

                    b.HasKey("Id");

                    b.HasIndex("SectionID");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("Conference.Model.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTimeSent");

                    b.Property<int>("LectureId");

                    b.Property<string>("Text")
                        .HasMaxLength(200);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LectureId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Conference.Model.RoleInLecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LectureID");

                    b.Property<int>("Role");

                    b.Property<int>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("LectureID");

                    b.HasIndex("UserID");

                    b.ToTable("RoleInLecture");
                });

            modelBuilder.Entity("Conference.Model.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConferenceId");

                    b.Property<string>("SectionName");

                    b.Property<int>("ThemeSectionId");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("ThemeSectionId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("Conference.Model.ThemeSection", b =>
                {
                    b.Property<int>("ThemeSectionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ThemeSectionName");

                    b.HasKey("ThemeSectionId");

                    b.ToTable("ThemeSection");
                });

            modelBuilder.Entity("Conference.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("PassHash")
                        .HasMaxLength(500);

                    b.Property<int>("Sex");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Conference.Model.AdminOfConference", b =>
                {
                    b.HasOne("Conference.Model.Conference", "Conference")
                        .WithMany("AdminOfConferences")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Conference.Model.User")
                        .WithMany("AdminOfConferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conference.Model.Conference", b =>
                {
                    b.HasOne("Conference.Model.ThemeSection", "ThemeConference")
                        .WithMany()
                        .HasForeignKey("ThemeConferenceThemeSectionId");
                });

            modelBuilder.Entity("Conference.Model.File", b =>
                {
                    b.HasOne("Conference.Model.Lecture", "Lecture")
                        .WithMany("Lectures")
                        .HasForeignKey("LectureID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conference.Model.Lecture", b =>
                {
                    b.HasOne("Conference.Model.Section", "Section")
                        .WithMany("Lectures")
                        .HasForeignKey("SectionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conference.Model.Message", b =>
                {
                    b.HasOne("Conference.Model.Lecture", "Lecture")
                        .WithMany("Messages")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Conference.Model.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conference.Model.RoleInLecture", b =>
                {
                    b.HasOne("Conference.Model.Lecture", "Lecture")
                        .WithMany("RoleInLectures")
                        .HasForeignKey("LectureID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Conference.Model.User", "User")
                        .WithMany("RoleInLectures")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conference.Model.Section", b =>
                {
                    b.HasOne("Conference.Model.Conference", "Conference")
                        .WithMany()
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Conference.Model.ThemeSection", "ThemeSection")
                        .WithMany()
                        .HasForeignKey("ThemeSectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
